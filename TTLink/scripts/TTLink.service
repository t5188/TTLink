#!/system/bin/sh
scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
parent_dir=$(dirname ${scripts_dir})

source ${scripts_dir}/settings.ini
cd ${scripts_dir} # current working directory
  
disable_ipv6() {
  echo 0 >/proc/sys/net/ipv6/conf/all/accept_ra
  echo 0 >/proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 1 >/proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 1 >/proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 1 >/proc/sys/net/ipv6/conf/wlan0/disable_ipv6
  log Info "IPv6 has been disabled" >>"${parent_dir}/log/run.log"
}

enable_ipv6() {
  echo 1 >/proc/sys/net/ipv6/conf/all/accept_ra
  echo 1 >/proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 0 >/proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 0 >/proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 0 >/proc/sys/net/ipv6/conf/wlan0/disable_ipv6
  log Info "IPv6 has been enabled" >>"${parent_dir}/log/run.log"
}

device_index() {
  local max_retries=10
  local retry_count=0
  index=""
  if [ ! -f "${scripts_dir}/tables.tmp" ]; then
    device=$(awk -F'"' '/"interface_name"/ {print $4; exit}' ${box_confs_dir}/*.json)
    while [ -z "$index" ] && [ $retry_count -lt $max_retries ]; do
      index=$(ip route show table all | grep -E "default dev ${device} table [0-9]" | head -n 1 | awk '{print $5}')
      if [ -n "$index" ]; then
        break
      fi
      sleep 2
      retry_count=$((retry_count + 1))
      log Info "Attempting to fetch index (Attempt ${retry_count}/${max_retries})" >>"${parent_dir}/log/run.log"
    done
    [[ -n "${index}" ]] && echo "${index} ${device}" >${scripts_dir}/tables.tmp
    [[ -z "${index}" ]] && log Error "Failed to fetch index" >>"${parent_dir}/log/run.log" && exit 1
  fi
  read index device <"${scripts_dir}/tables.tmp"
}

ip_rules() {
  device_index
  local action=$1
  ipv4_rules=(
    "iif lo goto 6000 priority 5000"
    "iif ${device} lookup main suppress_prefixlength 0 priority 5010"
    "iif ${device} goto 6000 priority 5020"
    "from 10.0.0.0/8 lookup ${index} priority 5030"
    "from 172.16.0.0/12 lookup ${index} priority 5040"
    "from 192.168.0.0/16 lookup ${index} priority 5050"
    "nop priority 6000"
    "lookup main priority 7000"
  )
  for rule in "${ipv4_rules[@]}"; do
    ip -4 rule "${action}" ${rule}
  done
  case "${action}" in
  "add" | "-A" | "-I")
    log Info "IPv4 rules have been created" >>"${parent_dir}/log/run.log"
    ;;
  "del" | "-D")
    log Info "IPv4 rules have been removed" >>"${parent_dir}/log/run.log"
    ;;
  esac
  ipv6_rules=(
    "iif lo goto 6000 priority 5000"
    "iif ${device} lookup main suppress_prefixlength 0 priority 5010"
    "iif ${device} goto 6000 priority 5020"
    #"from 2001:db8::/32 lookup ${index} priority 5030"
    #"from fc00::/7 lookup ${index} priority 5040"
    #"from fd00::/8 lookup ${index} priority 5050"
    "nop priority 6000"
    "lookup main priority 7000"
  )
  for rule in "${ipv6_rules[@]}"; do
    ip -6 rule "${action}" ${rule}
  done
  case "${action}" in
  "add" | "-A" | "-I")
    log Info "IPv6 rules have been created" >>"${parent_dir}/log/run.log"
    ;;
  "del" | "-D")
    log Info "IPv6 rules have been removed" >>"${parent_dir}/log/run.log"
    ;;
  esac
}

ipt_tun() {
  local iptables=$1
  local action=$2
  if [[ "${action}" == "-I" ]]; then
    ${iptables} -N TUN_FORWARD 2>/dev/null
    ${iptables} -F TUN_FORWARD 2>/dev/null
    ${iptables} "${action}" TUN_FORWARD -i "${device}" -j ACCEPT
    ${iptables} "${action}" TUN_FORWARD -o "${device}" -j ACCEPT
    ${iptables} "${action}" FORWARD -j TUN_FORWARD
  elif [[ "${action}" == "-D" ]]; then
    ${iptables} "${action}" FORWARD -j TUN_FORWARD
    ${iptables} -F TUN_FORWARD 2>/dev/null
    ${iptables} -X TUN_FORWARD 2>/dev/null
  fi
  case "${action}" in
  "add" | "-A" | "-I")
    log Info "${iptables} TUN_FORWARD chain has been created" >>"${parent_dir}/log/run.log"
    ;;
  "del" | "-D")
    log Info "${iptables} TUN_FORWARD chain has been removed" >>"${parent_dir}/log/run.log"
    ;;
  esac
  ${iptables} "${action}" OUTPUT -p udp --dport 443 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT
  ${iptables} "${action}" OUTPUT -p udp --dport 80 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT
  case "${action}" in
  "add" | "-A" | "-I")
    log Info "${iptables} QUIC has been created" >>"${parent_dir}/log/run.log"
    ;;
  "del" | "-D")
    log Info "${iptables} QUIC has been removed" >>"${parent_dir}/log/run.log"
    ;;
  esac
}

dns_tun() {
  local name="DNS2TUN"
  local ip=${1}
  local iptables=${2}
  local action=${3}
  if [[ "${network_mode}" == "tun" ]]; then
    if [[ "${action}" == "-A" ]]; then
      local action1="add"
    elif [[ "${action}" == "-D" ]]; then
      local action1="del"
    fi
    ${ip} rule ${action1} fwmark 53 table ${index} priority 1000
    ${ip} route ${action1} default dev ${device} table ${index}
    case "${action1}" in
    "add" | "-A" | "-I")
      log Info "${ip} DNS2TUN rule has been created" >>"${parent_dir}/log/run.log"
      ;;
    "del" | "-D")
      log Info "${ip} DNS2TUN rule has been removed" >>"${parent_dir}/log/run.log"
      ;;
    esac
    if [[ "${action}" != "-D" ]]; then
      ${iptables} -t mangle -N ${name}
      ${iptables} -t mangle -F ${name}
      ${iptables} -t mangle ${action} ${name} -p udp --dport 53 -j MARK --set-mark 53
      ${iptables} -t mangle ${action} ${name} -p tcp --dport 53 -j MARK --set-mark 53
      case "${action1}" in
      "add" | "-A" | "-I")
        log Info "${iptables} ${name} rule has been created" >>"${parent_dir}/log/run.log"
        ;;
      esac
    fi
    ${iptables} -t mangle ${action} OUTPUT -j ${name}
    ${iptables} -t mangle ${action} PREROUTING -j ${name}
    if [[ "${action}" == "-D" ]]; then
      ${iptables} -t mangle -F ${name}
      ${iptables} -t mangle -X ${name}
      log Info "${iptables} ${name} rule has been removed" >>"${parent_dir}/log/run.log"
    fi
  else
    return
  fi
}

exec_dns_tun() {
  dns_tun "ip -4" "iptables" "-A"
  dns_tun "ip -6" "ip6tables" "-A"
}

rm_dns_tun() {
  dns_tun "ip -4" "iptables" "-D"
  dns_tun "ip -6" "ip6tables" "-D"
}

forward() {
  local action=$1
  if [[ "${action}" == "-I" ]]; then
    echo 1 >/proc/sys/net/ipv4/ip_forward
    echo 2 >/proc/sys/net/ipv4/conf/default/rp_filter
    echo 2 >/proc/sys/net/ipv4/conf/all/rp_filter
    enable_ipv6
    ip_rules "add"
    log Info "IP forwarding has been enabled" >>"${parent_dir}/log/run.log"
  elif [[ "${action}" == "-D" ]]; then
    disable_ipv6
    ip_rules "del"
    log Info "IP forwarding has been disabled" >>"${parent_dir}/log/run.log"
  fi
  ipt_tun "iptables" "${action}"
  ipt_tun "ip6tables" "${action}"
}

init_uids() {
  uid=""
  uids=()
  if [ -f "${parent_dir}/log/uids.list" ]; then
    rm "${parent_dir}/log/uids.list"
  fi

  for package_name in "${package_list[@]}"; do
    uid=$(busybox awk -v package="${package_name}" '$1 == package {print $2}' /data/system/packages.list)
    if [ -n "${uid}" ]; then
      uids+=("${uid}")
      echo "${package_name}: ${uid}" >>"${parent_dir}/log/uids.list"
    fi
  done

  for package_name in "${appclones[@]}"; do
    uid=$(busybox awk -v package="${package_name}" '$1 == package {print $2}' /data/system/packages.list)
    if [ -n "${uid}" ]; then
      uid="999$uid"
      uids+=("${uid}")
      echo "${package_name}: ${uid}" >>"${parent_dir}/log/uids.list"
    fi
  done

  sort -t ':' -k2 -n "${parent_dir}/log/uids.list" -o "${parent_dir}/log/uids.list"
  uids=($(printf "%s\n" "${uids[@]}" | sort -n | uniq))
}

init_uidrange() {
  init_uids
  start=0
  end=99999999
  previous=$start
  for uid in "${uids[@]}"; do
    if [[ $((uid - 1)) -ge $previous ]]; then
      echo "${previous}-$((uid - 1))"
    fi
    previous=$((uid + 1))
  done
  if [[ $previous -le $end ]]; then
    echo "${previous}-${end}"
  fi
}

uidrange() {
  local action=${1}
  stdout2array=()

  if [[ "${proxy_mode}" == "whitelist" ]] && [[ ${#package_list[@]} -gt 0 ]]; then
    stdout2array=($(init_uidrange))
    for whiteapp in "${stdout2array[@]}"; do
      ip -4 rule ${action} from all uidrange ${whiteapp} priority 9000 goto 9010
      ip -6 rule ${action} from all uidrange ${whiteapp} priority 9000 goto 9010
    done

  elif [[ "${proxy_mode}" == "blacklist" ]] && [[ ${#package_list[@]} -gt 0 ]]; then
    init_uids
    uids+=("${box_user}" "${xray_user}")
    uids=($(printf "%s\n" "${uids[@]}" | sort -n | uniq))
    for blackapp in "${uids[@]}"; do
      ip -4 rule ${action} from all uidrange ${blackapp}-${blackapp} priority 9000 goto 9010
      ip -6 rule ${action} from all uidrange ${blackapp}-${blackapp} priority 9000 goto 9010
    done

  elif [[ ${#package_list[@]} -eq 0 ]]; then
    uids=("${box_user}" "${xray_user}")
    for users in "${uids[@]}"; do
      ip -4 rule ${action} from all uidrange ${users}-${users} priority 9000 goto 9010
      ip -6 rule ${action} from all uidrange ${users}-${users} priority 9000 goto 9010
    done

  else
    return
  fi

  case "${action}" in
  "add" | "-A" | "-I")
    log Info "Package rules have been created" >>"${parent_dir}/log/run.log"
    log Info "proxy_mode: ${proxy_mode}" >>"${parent_dir}/log/run.log"
    ;;
  "del" | "-D")
    log Info "Package rules have been removed" >>"${parent_dir}/log/run.log"
    ;;
  esac
}

add_trp() {
  ${1} rule add fwmark "${fwmark}" table ${2} priority 1000
  ${1} route add local default dev lo table ${2}
  ${3} -t mangle -N ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -N ${4}_LOCAL
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -N DIVERT
  ${3} -t mangle -F DIVERT
  ${3} -t mangle -A ${4}_LOCAL -p udp --dport 53 -j MARK --set-mark ${fwmark}
  ${3} -t mangle -A ${4}_LOCAL -p tcp --dport 53 -j MARK --set-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p tcp --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  for subnet in ${5}; do
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -j RETURN
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -j RETURN
  done
  ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  if [[ "${ap_list}" != "" ]]; then
    for ap in ${ap_list[@]}; do
      ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
      ${3} -t mangle -A ${4}_EXTERNAL -p udp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
    done
  fi
  if [[ -n "${AIDs}" ]]; then
    for AID in ${AIDs[@]}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p tcp -j MARK --set-mark ${fwmark}
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p udp -j MARK --set-mark ${fwmark}
    done
  fi
  case "${proxy_mode}" in
  "blacklist")
    if [[ ${#uids[@]} -gt 0 ]]; then
      for appid in ${6}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp ! --dport 53 -j RETURN
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp ! --dport 53 -j RETURN
      done
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    else
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    fi
    ;;
  "whitelist")
    if [[ ${#uids[@]} -gt 0 ]]; then
      for appid in ${6}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j MARK --set-mark ${fwmark}
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp -j MARK --set-mark ${fwmark}
      done
    else
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    fi
    ;;
  *)
    log Error "proxy_mode incorrect" >>"${parent_dir}/log/run.log"
    ;;
  esac
  ${3} -t mangle -I ${4}_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN
  ${3} -t mangle -I ${4}_LOCAL -m owner --uid-owner ${xray_user} --gid-owner ${xray_group} -j RETURN
  ${3} -t mangle -A DIVERT -j MARK --set-mark "${fwmark}"
  ${3} -t mangle -A DIVERT -j ACCEPT
  ${3} -t mangle -A PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
  ${3} -t mangle -A OUTPUT -j ${4}_LOCAL
  log Info "All $(echo "${4}" | awk '{print $1}') chains have been created" >>"${parent_dir}/log/run.log"
}

del_trp() {
  ${1} rule del fwmark "${fwmark}" table ${2} priority 1000
  ${1} route del local default dev lo table ${2}
  ${1} route flush table ${2}
  ${3} -t mangle -D PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT
  ${3} -t mangle -D OUTPUT -j ${4}_LOCAL
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -F DIVERT
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -X ${4}_EXTERNAL
  ${3} -t mangle -X DIVERT
  ${3} -t mangle -X ${4}_LOCAL
}

run_add_trp() {
  log Info "tp_port: ${tp_port}" >>"${parent_dir}/log/run.log"
  add_trp "ip -4" "${table}" "${IPV4}" "${chain_name}4" "${intranet4[*]}" "${uids[*]}"
  add_trp "ip -6" "${table}" "${IPV6}" "${chain_name}6" "${intranet6[*]}" "${uids[*]}"
}

run_del_trp() {
  del_trp "ip -4" "${table}" "${IPV4}" "${chain_name}4"
  del_trp "ip -6" "${table}" "${IPV6}" "${chain_name}6"
}

add_cron() {
  if [[ "${crond_task}" == "enable" ]]; then
    crontab_file="${scripts_dir}/root"
    if pgrep busybox crond >/dev/null; then
      kill -9 $(pgrep busybox crond)
    fi
    echo "5 */2 * * * touch ${module_dir}/disable && sleep 3 && rm ${module_dir}/disable" > "${crontab_file}"
    nohup busybox crond -c ${scripts_dir}/ >/dev/null 2>&1 &
    log Info "New task: $(busybox crontab -l -c ${scripts_dir}/)" >>"${parent_dir}/log/run.log"
  else
    log Warn "crond_task is not set to enable. No crond task created." >>"${parent_dir}/log/run.log"
  fi
}

del_cron() {
  if pgrep busybox crond >/dev/null; then
    kill -9 $(pgrep busybox crond)
    rm ${scripts_dir}/root >/dev/null 2>&1
  fi
}

disable_quic() {
  ${1} ${2} OUTPUT -p udp --dport 443 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT
  ${1} ${2} OUTPUT -p udp --dport 80 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT
  if [[ "${2}" == "-D" ]]; then
    while ${1} -C OUTPUT -p udp --dport 443 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT ||
      ${1} -C OUTPUT -p udp --dport 80 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT; do
      del_disable_quic
    done
  fi
}

run_disable_quic() {
  if [[ "${quic}" == "disable" ]]; then
    disable_quic "${IPV4}" "-I"
    disable_quic "${IPV6}" "-I"
  fi
  log Info "QUIC has been disabled" >>"${parent_dir}/log/run.log"
}

del_disable_quic() {
  if [[ "${quic}" == "disable" ]]; then
    disable_quic "${IPV4}" "-D"
    disable_quic "${IPV6}" "-D"
  fi
  log Info "QUIC has been enabled" >>"${parent_dir}/log/run.log"
}

version() {
  version_box=$(${bin_box} version | head -n 1 | awk '{print $3}')
  version_xray=$(${bin_xray} version | head -n 1 | awk '{print $2}')
}

ownership() {
  chmod 755 ${bin_box} ${bin_xray}
  chown root:net_admin ${bin_box} ${bin_xray}
  chmod o+rw ${public_log_dir}
  find "${parent_dir}" -type f -name "*.log" ! -name "run.log" -exec rm -f {} + 2>/dev/null
  log Info "Ownership has been set" >>"${parent_dir}/log/run.log"
}

launch_cores() {
  ulimit -SHn 1000000
  ownership
  if [[ -f "${bin_box}" && -f "${bin_xray}" ]]; then
    nohup busybox setuidgid ${box_user}:${box_group} ${bin_box} run -C ${box_confs_dir} -D ${parent_dir}/binary/ >/dev/null 2>&1 &
    if [[ "${network_mode}" == "tun" ]]; then
      forward -I
      uidrange add
      [[ "${dns2tun}" == "enable" ]] && exec_dns_tun
    fi
    nohup busybox setuidgid ${xray_user}:${xray_group} ${bin_xray} run -confdir ${xray_confx_dir} >/dev/null 2>&1 &
    pid=$(pidof "${bin_xray}")
    log Info "xray process (${pid}) started." >>"${parent_dir}/log/run.log"
    pid=$(pidof "${bin_box}")
    log Info "sing-box process (${pid}) started." >>"${parent_dir}/log/run.log"
  else
    if [[ ! -f "${bin_box}" && ! -f "${bin_xray}" ]]; then
      log Error "Both binaries are missing: $(basename "${bin_box}") and $(basename "${bin_xray}")" >>"${parent_dir}/log/run.log"
      toast "Error: Both binaries are missing: $(basename "${bin_box}") and $(basename "${bin_xray}"). Please check your installation."
    elif [[ ! -f "${bin_box}" ]]; then
      log Error "Binary missing: $(basename "${bin_box}")" >>"${parent_dir}/log/run.log"
      toast "Error: Missing binary $(basename "${bin_box}"). Please check your installation."
    elif [[ ! -f "${bin_xray}" ]]; then
      log Error "Binary missing: $(basename "${bin_xray}")" >>"${parent_dir}/log/run.log"
      toast "Error: Missing binary $(basename "${bin_xray}"). Please check your installation."
    fi
  fi
}

shutdown_cores() {
  pid=$(pidof "${bin_xray}")
  kill "${pid}" >/dev/null 2>&1
  log Info "xray process (${pid}) terminated." >>"${parent_dir}/log/run.log"
  pid=$(pidof "${bin_box}")
  kill "${pid}" >/dev/null 2>&1
  log Info "sing-box process (${pid}) terminated." >>"${parent_dir}/log/run.log"
  find "${parent_dir}" -type f \( -name "*.log" -o -name "*.list" \) ! -name "run.log" -exec rm -f {} +
}

start_tun() {
  log Info "---welcome---" >"${parent_dir}/log/run.log"
  if [[ -n $(pidof "${bin_box}") || -n $(pidof "${bin_xray}") ]]; then
    log Info "Close existing processes"
    stop_tun
    log Info "---restart---" >"${parent_dir}/log/run.log"
  fi
  launch_cores
  add_cron
  toast "TUN已启动"
}

stop_tun() {
  if [[ -z $(pidof "${bin_box}") && -z $(pidof "${bin_xray}") ]]; then
    exit 1
  fi
  log Info "---goodbye---" >"${parent_dir}/log/run.log"
  forward -D
  [[ "${dns2tun}" == "enable" ]] && rm_dns_tun
  uidrange del
  rm -f ${scripts_dir}/tables.tmp
  del_cron
  shutdown_cores
  toast "TUN已关闭"
}

start_trp() {
  log Info "---welcome---" >"${parent_dir}/log/run.log"
  if [[ -n $(pidof "${bin_box}") || -n $(pidof "${bin_xray}") ]]; then
    log Info "Close existing processes"
    stop_trp
    log Info "---restart---" >"${parent_dir}/log/run.log"
  fi
  init_uids
  run_add_trp
  run_disable_quic
  launch_cores
  add_cron
  toast "TP已开启"
}

stop_trp() {
  if [[ -z $(pidof "${bin_box}") && -z $(pidof "${bin_xray}") ]]; then
    exit 1
  fi
  log Info "---goodbye---" >"${parent_dir}/log/run.log"
  run_del_trp >/dev/null 2>&1
  del_disable_quic
  del_cron
  shutdown_cores
  ${scripts_dir}/net.inotify D
  toast "TP已关闭"
}

InChange() {
  if [[ "${network_mode}" == "tproxy" ]]; then
    $yq '.inbounds = [{"type":"tproxy","tag":"tproxy-in","listen":"::","listen_port":2025}]' -i --output-format=json "${inbounds_config_file}"
    tp_port=$(awk -F':' '/"listen_port"/ {gsub(/[^0-9]/, "", $NF); print $NF; exit}' "${box_confs_dir}"/*.json 2>/dev/null)
  elif [[ "${network_mode}" == "tun" ]]; then
    $yq '.inbounds = [{"type":"tun","tag":"tun-in","interface_name":"tun0","mtu":1400,"auto_route":true,"strict_route":true,"endpoint_independent_nat":true,"address":["172.18.0.1/30","fdfe:dcba:9876::1/126"],"stack":"system"}]' -i --output-format=json "${inbounds_config_file}"
  else
    log Warn "Only supports tproxy or tun " > "${parent_dir}/log/run.log"
    toast "network_mode Error"
    exit 1
  fi
}

description() {
  local symbol=$1
  local event=$2
  version
  prop_file="${module_dir}/module.prop"
  core_name_box="${bin_box##*/}"
  core_name_xray="${bin_xray##*/}"
  current_time=$(date "+[%m.%d %H:%M]")
  sed -i "/description/c\description=${current_time} ${symbol} ${core_name_box} ${version_box} work with ${core_name_xray} ${version_xray} ${network_mode} ${event}" "${prop_file}"
  log Info "${symbol} ${network_mode} ${event}" >>"${parent_dir}/log/run.log"
}

case "$1" in
enable)
  if [[ "${network_mode}" == "tproxy" ]]; then
    InChange
    start_trp
  else
    InChange
    start_tun
  fi
  description "🤪" "started"
  ;;
disable)
  if [[ "${network_mode}" == "tproxy" ]]; then
    stop_trp
  else
    stop_tun
  fi
  description "🥴" "stopped"
  ;;
esac

# TTLink.service
